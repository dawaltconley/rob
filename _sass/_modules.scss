/*
 * Text
 */

.text-left {
    text-align: left;
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-justify {
    text-align: justify;
}

.text-justify-full {
    @extend .text-justify;

    &::after {
        content: "";
        display: inline-block;
        width: 100%;
    }

    @supports (text-align-last: justify) {
        text-align-last: justify;

        &::after {
            display: none;
        }
    }
}

.caps {
    font-family: $caps-font-family;
    font-weight: normal;
    font-size: 2em;
    text-transform: uppercase;
}

.title {
    font-family: "Raleway", HelveticaNeue-Thin, sans-serif;
    font-weight: 200;
    letter-spacing: 2px;
    font-size: 88px;
}

.subtitle {
    font-size: 42px;
    font-weight: 400;
}

@media screen and (max-width: map-get($bp, "mobile")) {
    $title-font-size: 14.45vmin;

    .title {
        margin-bottom: 0.8vmin;
        padding-bottom: 1vmin;
        font-size: 14.45vmin;
        border-bottom-width: 0.4vmin;
    }

    .subtitle {
        font-size: $title-font-size * 42 / 88;
    }
}

@for $i from 1 through 9 {
    $weight: $i * 100;
    .fw-#{$weight} {
        font-weight: $weight;
    }
}

.font-size-large {
    font-size: 1.5em;
}

.font-size-double {
    font-size: 2em;
}

.small {
    font-size: 14px;
    line-height: 1.5;
}

.shadow {
    text-shadow: $text-shadow;
}

.full-shadow {
    text-shadow: $full-shadow;
}

.font-smoothing-normal {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
}

.font-smoothing-dark {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.avoid-wrap {
    white-space: nowrap;

    @supports(text-wrap: avoid) {
        white-space: initial;
        white-space: unset;
        text-wrap: avoid;
    }
}

.no-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}

/*
 * Block Styles
 */

.border-between {
    @extend .border-basic-b;

    &:last-of-type {
        border-bottom: 0;
    }
}

.border-around {
    @extend .border-basic-b;

    &:first-of-type {
        @extend .border-basic-t;
    }
}

.radial-shadow {
    $density: 0.3;
    $reach: 0%;
    $overflow: 50%;
    @extend .relative, .overflow-v;

    &::before {
        content: "";
        position: absolute;
        top: -$overflow;
        left: -$overflow;
        right: -$overflow;
        bottom: -$overflow;
        background: -webkit-radial-gradient(ellipse closest-side, rgba(black, $density) $reach, transparent);
        background: radial-gradient(ellipse closest-side, rgba(black, $density) $reach, transparent);
        z-index: 0;
    }

    & > * {
        @extend .z-1;
    }
}

/*
 * Links
 */

.subtle-link {
    color: inherit;
    text-decoration: none;

    &:visited {
        color: inherit;
    }

    &:hover {
        color: inherit;
        text-decoration: underline;
    }
}

.subtle-icon {
    @extend .subtle-link;

    &:hover {
        text-decoration: none;
    }
}

.button {
    @extend .inline-block, .subtle-icon;
    padding: 0.8rem 1rem 1rem;
    line-height: 1;
    -webkit-clip-path: polygon(5% 0, 95% 0, 100% 25%, 100% 75%, 95% 100%, 5% 100%, 0 75%, 0 25%);
    clip-path: polygon(5% 0, 95% 0, 100% 25%, 100% 75%, 95% 100%, 5% 100%, 0 75%, 0 25%);
    background-color: $brand-color;
    @if lightness($brand-color) > 50% {
        @extend .light;
        &:visited {
            background-color: darken($brand-color, 10%);
        }
        &:hover {
            background-color: darken($brand-color, 15%);
        }
    } @else {
        @extend .dark;
        &:visited {
            background-color: lighten($brand-color, 10%);
        }
        &:hover {
            background-color: lighten($brand-color, 15%);
        }
    }
}

/*
 * Images
 */

.bg-img {
    @include background-image;
}

.object-fit-cover {
    @extend .relative, .bg-img;

    & > img {
        @extend .fill-parent;
        object-fit: cover;
    }
}

.object-pos-rob {
    object-position: 70% 0%;
}

.splash-img {
    @include background-image($splash-image, $darken: .4, $responsive: true);
}

.cta-img {
    @include background-image($y: bottom);
    @include responsive-image((linear-gradient(rgba(black, 0.7), rgba(black, 0.5)), $cta-image));
}

@each $name, $image in $project-images {
    .#{$name}-img {
        @include background-image($image, $lighten: .6, $blur: 50px);
    }
}

/*
 * Icons
 */

.scroll-arrow {
    font-size: 36px;
    padding: 4px;
}

// @media screen and (max-height: map-get($bp, "mobile")) and (min-width: 450px) {
//     .scroll-arrow {
//         position: absolute;
//         bottom: $spacing-unit;
//         right: $spacing-unit;
//     }
// }

.fa-icon-circle {
    $circle-size: 1.5;
    line-height: $circle-size;
    text-align: center;
    border-radius: 50%;
    // border-width: 2px;
    border-width: .07em;
    border-style: solid;
    border-color: inherit;

    &::before {
        display: block;
        width: $circle-size * 1em;
        height: $circle-size * 1em;
        margin: 0;
    }
}

// loops through all icon classes, passes their brand color to all relevant styles. this can be unset later.
@each $icon-name, $color in $fa-icons {
    .#{$icon-name}-icon {
        &, &:hover {
            color: $color;
            background-color: $color !important;
            border-color: $color !important;
        }
    }
}

// styling resets, including inherit fallback for older browsers
%reset-color {
    color: inherit;
}

%reset-background-color {
    background-color: inherit !important;
}

%reset-border-color {
    border-color: inherit !important;
}

// universal styling for the anchor tags that contain social-media fa-icons.
.media-icon {
    display: inline-block;
    position: relative;
    line-height: inherit;
    transition: .3s;
    z-index: 1;

    &::before {
        @extend .no-select;
        position: relative;
        user-select: none;
        z-index: 3;
    }

    &::after {
        content: "";
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        transition: inherit;
        z-index: 2;
    }
}

// basic icons inherit their text color. hovering reveals their brand color.
.media-icon-basic .media-icon {
    &:not(:hover) {
        @extend %reset-color;
    }

    &, &:hover {
        @extend %reset-background-color, %reset-border-color;
    }
}

// square buttons. white icons with brand-color background. hovering animates to white background with icons in their brand color.
.media-icon-button .media-icon {
    @extend .media-icon-bloat;
    color: white;

    &:hover::after {
        background-color: rgba(white, 0.2);
    }
}

.media-icon-shutter .media-icon {
    @extend .media-icon-bloat;

    &:not(:hover) {
        color: white;
    }

    &::after {
        left: 50%; right: 50%;
    }

    &:hover::after {
        left: 0; right: 0;
        background-color: white;
    }
}

ul.media-icon-basic, ul.media-icon-button, ul.media-icon-circle {
    @extend .unlist;
}

// forces icon links to fill a certain size, with icon hovering in the middle
.media-icon-bloat .media-icon {
    @extend .flex-center;
    display: inline-flex;
    min-width: 1.2em;
    min-height: 1.2em;
}

// expands a list of icons; icons get 2em of space, and links expand to maintain contact.
.media-icon-list {
    @extend .media-icon-bloat;

    > * {
        margin: 0;
    }

    &.flex-row, &.flex-col {
        > * {
            flex: 0 1 2em;
        }
    }

    &.media-icon-circle .media-icon {
        flex: 0 1 auto;
        margin: 0 .25em;
    }

    &:not(.flex-row):not(.flex-col):not(.media-icon-circle) .media-icon {
        min-width: 2em;
    }

    &:not(.media-icon-circle) > li {
        display: inline-flex;

        > .media-icon:only-child {
            display: flex;
            @extend .flex-center, .fill-flex-parent;
        }
    }
}

// stretches icons to evenly fill space of container
.media-icon-stretch {
    &.flex-row, &.flex-col {
        > * {
            flex: 1 1 0;
        }
    }
}

.media-icon-circle .media-icon {
    @extend .fa-icon-circle;

    &:not(:hover) {
        @extend %reset-color, %reset-background-color, %reset-border-color;
    }

    &:hover {
        color: white;
        text-shadow: none;

        &::before {
            box-shadow: none;
        }
    }
}

.media-icon-shadow .media-icon::before {
    box-shadow: 2px 1px 6px rgba(0, 0, 0, 0.4), 2px 1px 6px rgba(0, 0, 0, 0.4) inset;
}

/*
 * Transforms
 */

.hw-accel {
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
}

.translate-x-left {
    -webkit-transform: translateX(-100%);
    transform: translateX(-100%);
}

.translate-x-right {
    -webkit-transform: translateX(100%);
    transform: translateX(100%);
}

.translate-x-none {
    -webkit-transform: translateX(0%);
    transform: translateX(0%);
}

.flip-x {
    -webkit-transform: rotate3d(1, 0, 0, 180deg);
    transform: rotate3d(1, 0, 0, 180deg);
}

.no-backface {
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
}

/*
 * Transitions
 */

.t-default {
    -webkit-transition-duration: $trans-default;
    transition-duration: $trans-default;
}

.t-slow {
    -webkit-transition: $trans-slow;
    transition: $trans-slow;
}

.t-button-flip {
    -webkit-transition: transform $trans-project/2 $trans-project/2;
    transition: transform $trans-project/2 $trans-project/2;
}

.t-project-view {
    transition: $trans-project ease-out;
}

.t-project {
    -webkit-transition: transform $trans-project ease-in-out, height 0s $trans-project;
    transition: transform $trans-project ease-in-out, height 0s $trans-project;
}

.t-open-project {
    -webkit-transition: transform $trans-project ease-in-out;
    transition: transform $trans-project ease-in-out;
}

.t-inherit {
    -webkit-transition: inherit;
    transition: inherit;
}

.t-deep > * {
    @extend .t-inherit;
}

.t-none {
    -webkit-transition: 0s;
    transition: 0s;
}

/*
 * Hover
 */

.hover-fade-in {
    opacity: 0;
    -webkit-transition: opacity $trans-default;
    transition: opacity $trans-default;

    @include hover {
        opacity: 1;
    }
}

.hover-scale {
    transform: scale(1) translateZ(0);

    @include hover {
        transform: scale(1.05) translateZ(0);
    }
}

.hover-lighten {
    @extend .relative;

    &::after {
        @extend .fill-parent, .t-inherit;
        content: "";
        background-color: rgba(white, 0);
    }

    @include hover {
        &::after {
            background-color: rgba(white, 0.1);
        }
    }
}

.hover-blur {
    @include blur(0);
    -webkit-transition-property: -webkit-filter;
    transition-property: filter;

    @include hover {
        @include blur(5px);
    }
}

/*
 * Target
 */

.target-display {
    display: none;

    &:target {
        display: inherit;
    }
}
