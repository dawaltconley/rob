---
---

// Basic Variables

$spacing-unit:          30px;

$base-font-family:      "Raleway", HelveticaNeue, sans-serif;
$base-font-size:        1.35rem;
$base-font-weight:      400;
$base-line-height:      1.4;
$base-line-length:      36em;

$header-font-weight:    600;

$caps-font-family:      "Oswald", Futura-CondensedMedium, sans-serif;

$perspective:           2000px;
$trans-default:         .3s;

// Colors

$brand-color:           firebrick; // #981212 better if want applied to page title as well
$text-shadow:           2px 1px 6px rgba(black, 0.6);
$full-shadow:           0 0 0.24em black;

$gray-color:            #828282;
$gray-color-light:      lighten($gray-color, 40%);
$gray-color-dark:       darken($gray-color, 25%);

$fa-icons:              ({% for icon in site.data.icon-types %}
                            {{ icon.type }}: {{ icon.color }},{% endfor %}
                        );

// Images

$splash-image:          url({{ site.baseurl | append: '/media/backgrounds/mixing-board-angled.jpg' }});
$cta-image:             url({{ site.baseurl | append: '/media/backgrounds/mixing-board-straight.jpg' }});

$project-images:        ({% for project in site.projects %}
                            {{ project.slug }}: url({{ site.baseurl }}/{{ site.prose.media}}/{{ project.image }}),{% endfor %}
                        );

$image-bp:              ({% if jekyll.environment == 'production' or jekyll.environment == 'gulp' %}
                            {% for bp in site.image_bp %}
                                (
                                    x: {{ bp | map: 'x' }},
                                    y: {{ bp | map: 'y' }}
                                ),
                            {% endfor %}
                        {% endif %});

// Layouts

$sizes: (
    "full":             100%,
    "screen":           100vw 100vh,
    "half-screen":      50vw 50vh,
    "no":               0,
);

$margins: (
    "auto":     auto,
    "0":        0,
    "s":        15px,
    "m":        30px,
    "l":        60px,
);

$paddings: (
    "xs":       10px,
    "s":        15px,
    "m":        30px,
    "l":        60px,
);

$borders: (
    "basic": (
        width: 1px,
        style: solid,
        color: inherit
    ),
    "thick": (
        width: 2px,
        style: solid,
        color: inherit
    ),
);

$trans-default: .3s;
$trans-slow:    1s;
$trans-project: {{ site.project_transition_time }};

// Breakpoints

$bp: (
    //"x-large":  1800px,
    "large":    1000px,
    "laptop":   800px,
    "mobile":   600px,
);

// Modules

{% if jekyll.environment == 'accessibility' %}
    @import "../node_modules/sass-color-helpers/stylesheets/_color-helpers.scss";
{% else %}
    @function ch-color-contrast($args...) { @return 21 };
{% endif %}

// Mixins

$sides: "top", "bottom", "left", "right";
$side: null;

@function get-orientation($side) {
    @if $side == "top" or $side == "bottom" {
        @return "vertical";
    } @else if $side == "left" or $side == "right" {
        @return "horizontal";
    } @else {
        @error "Not a valid side."
    }
}

@mixin all-sides($class-name) {
    .#{$class-name} {
        @each $name in $sides {
            $side: $name !global;
            $o: str-slice(get-orientation($side), 1, 1);
            &, &-#{$o}, &-#{str-slice($side, 1, 1)} {
                @content;
            }
        }
    }
}

@function file-suffix ($file-name, $suffix, $extension: ".") {
    $return: ();
    $separator: list-separator($file-name);
    @each $name in $file-name {
        $ext-index: null;
        $i: 1;
        @while ($i <= length($extension)) and not($ext-index) {
            $ext: nth($extension, $i);
            @if str-slice($ext, 1, 1) != "." { $ext: ".#{$ext}"; }
            $ext-index: str-index(to-lower-case($name), to-lower-case($ext));
            $i: $i + 1;
        }
        @if $ext-index {
            $return: append($return, str-insert($name, $suffix, $ext-index), $separator);
        } @else {
            $return: append($return, $name, $separator);
        }
    }
    @return $return;
}

@mixin theme($background-color: null, $text-color: null, $brand-color: null, $light-text: null, $accessibility: "AA") {
    $light-theme: null; $ld-tx-bg: null; $ld-br-tx: null; $ld-br-bg: null; $ct-tx-bg: null; $ct-br-tx: null; $ct-br-bg: null;
    $aa: to-upper-case($accessibility) == "AA";
    $aaa: to-upper-case($accessibility) == "AAA";

    @if $background-color and $text-color {
        $light-theme: lightness($text-color) < lightness($background-color);
        $ld-tx-bg: abs(lightness($text-color) - lightness($background-color)) / 100%;
        $ct-tx-bg: ch-color-contrast($background-color, $text-color);

        @if $light-theme and not($light-text) {
            $light-text: mix($text-color, $background-color, 58%);
            -webkit-font-smoothing: subpixel-antialiased;
            -moz-osx-font-smoothing: auto;
        } @else {
            $light-text: mix($text-color, $background-color, 72%);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        @if $ct-tx-bg < 4.5 and $aa {
            @warn "The contrast ratio of a theme's text (#{$text-color}) and background (#{$background-color}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 AA standards.";
        } @else if $ct-tx-bg < 7 and $aaa {
            @warn "The contrast ratio of a theme's text (#{$text-color}) and background (#{$background-color}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 AAA standards.";
        }
    } @else if not($brand-color or $light-text) {
        @if $background-color { @warn "Insufficient arguments passed to theme include: $background-color needs to be accompanied by a $text-color."; }
        @else if $text-color { @warn "Insufficient arguments passed to theme include: $text-color needs to be accompanied by a $background-color."; }
        @else { @warn "No arguments passed to theme include."; }
    }

    @if $brand-color and $text-color and $background-color {
        $ld-br-tx: abs(lightness($brand-color) - lightness($text-color)) / 100%;
        $ld-br-bg: abs(lightness($brand-color) - lightness($background-color)) / 100%;
        $ct-br-tx: ch-color-contrast($brand-color, $text-color);
        $ct-br-bg: ch-color-contrast($brand-color, $background-color);

        @if $ct-br-tx < 3 and $aa {
            @warn "The contrast ratio of a theme's link (#{$brand-color}) and text (#{$text-color}) colors is #{$ct-br-tx}, which does not meet WCAG 2.0 AA standards.";
        }
        @if $ct-br-bg < 4.5 and $aa {
            @warn "The contrast ratio of a theme's link (#{$brand-color}) and background (#{$background-color}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 AA standards.";
        } @else if $ct-br-bg < 7 and $aaa {
            @warn "The contrast ratio of a theme's link (#{$brand-color}) and background (#{$background-color}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 AAA standards.";
        }
    }

    background-color: $background-color;
    color: $text-color;
    border-color: $text-color;

    @if $background-color and $text-color {
        blockquote {
            color: $light-text;
            border-left-color: mix($light-text, $background-color, 25%);
        }

        pre, code {
            @if $light-theme {
                $box-color: darken($background-color, $ld-tx-bg * 15%);
                $box-color: desaturate($box-color, saturation($box-color) / 2 );
                color: mix($text-color, $box-color, 80%);
                border-color: darken($box-color, $ld-tx-bg * 25%);
                background-color: $box-color;
            } @else {
                $box-color: lighten($background-color, $ld-tx-bg * 15%);
                $box-color: desaturate($box-color, saturation($box-color) / 2 );
                color: mix($text-color, $box-color, 80%);
                border-color: darken($box-color, $ld-tx-bg * 10%);
                background-color: $box-color;
            }
        }

        .text-light, &.text-light {
            color: $light-text;
        }

        .border-light, &.border-light {
            border-color: mix($text-color, $background-color, 10%);
        }

        .border-x-light, &.border-x-light {
            border-color: mix($text-color, $background-color, 5%);
        }
    } @else if $light-text {
        blockquote {
            color: $light-text;
            border-left-color: lighten($light-text, 25%);
        }

        .text-light, &.text-light {
            color: $light-text;
        }
    }

    @if $brand-color {
        a {
            color: $brand-color;

            @if $text-color and $background-color {
                &:hover { color: darken($brand-color, $ld-br-tx * 45%); }
                &:visited { color: lighten($brand-color, $ld-br-bg * 35%); }
            } @else {
                &:hover { color: darken($brand-color, 15%); }
                &:visited { color: darken($brand-color, 25%); }
            }
        }
    }

}

@mixin wrapper ($breakpoints, $min-margins: $spacing-unit) {
    $bp-first: nth($breakpoints, 1);
    $bp-last: nth($breakpoints, length($breakpoints));

    @if length($breakpoints) < 2 {
        @error "Invalid breakpoint list: must contain at least two values.";
    } @else if $bp-first < $bp-last {
        @error "Invalid breakpoint list: values should proceed from highest to lowest";
    }

    @extend .clearfix;
    margin-left: auto;
    margin-right: auto;
    max-width: $bp-first - ($min-margins * 2);

    @for $i from 1 to length($breakpoints) {
        $bp: nth($breakpoints, $i);
        $bp-next: nth($breakpoints, $i + 1);
        $query: null;
        $invalid: null;

        @if $bp < $bp-next {
            @error "Invalid breakpoint list: order must be consistent.";
        }

        @media screen and (max-width: $bp) {
            max-width: $bp-next - ($min-margins * 2);
        }
    }
}

@mixin fixed-ratio ($x, $y, $width: 100%) {
    @extend %fixed-ratio; // found in _layout partial
    width: $width;
    padding-top: $y/$x * $width;
}

@mixin columns-reset ($break-point) { // mobile reset
    @media screen and (max-width: $break-point) {
        .cell {
            display: block;

            .button {
                position: static;
                margin: 0 auto $spacing-unit;
            }

            &:last-child > :last-child { // mobile only: remove bottom margin of last element in table
                margin-bottom: 0;
            }
        }

        &.button-columns .cell {
            padding-bottom: 0;
        }
    }

    @media screen and (min-width: $break-point + 1px) { // desktop only: remove bottom margin of all last element in each cell
        .cell > :last-child {
            margin-bottom: 0;
        }
    }
}

@mixin inline-columns ($columns, $spacing: 0) {
    @if not($columns > 1) { @error "inline-columns mixin must have more than one column." }
    $width: 100% / $columns;
    $row-end: $columns + "n";
    display: inline-block;
    width: calc(#{$width} - (#{$spacing} * (#{$columns} - 1) / #{$columns}));
    margin-right: $spacing;
    margin-bottom: $spacing;

    &:nth-child(#{$row-end}), &:last-child {
        margin-right: 0;
    }
}

@mixin blur($blur) {
    -webkit-filter: blur($blur);
    filter: blur($blur);
}

@mixin responsive-image ($image, $breakpoints: $image-bp) {
    @if $breakpoints and length($breakpoints) > 0 {
        $file-types: jpg, jpeg, png, gif, svg, webp;

        // wrap image files in url if they are not yet
        @each $bg in $image {
            $i: index($image, $bg);
            $is-img: null;
            $n: 1;
            @while ($n <= length($file-types)) and not($is-img) {
                $ext: nth($file-types, $n);
                @if str-slice($ext, 1, 1) != "." { $ext: ".#{$ext}"; }
                $is-img: str-index(to-lower-case($bg), to-lower-case($ext));
                $n: $n + 1;
            }
            @if $is-img and (str-slice($bg, 1, 4) != "url(") {
                $bg: url(#{unquote($bg)});
                $image: set-nth($image, $i, $bg);
            }
        }

        // first
        $first: nth($breakpoints, 1);
        $x: map-get($first, x) + 1;
        $y: map-get($first, y) + 1;
        @media screen and (min-width: #{$x}px), screen and (min-height: #{$y}px) {
            background-image: $image;
        }

        // array values
        @for $i from 1 to length($breakpoints) {
            $current: nth($breakpoints, $i);
            $x: map-get($current, x);
            $y: map-get($current, y);
            $next: nth($breakpoints, $i + 1);
            $nx: map-get($next, x) + 1;
            $ny: map-get($next, y) + 1;
            @media screen and (max-width: #{$x}px) and (max-height: #{$y}px) and (min-width: #{$nx}px),
              screen and (max-width: #{$x}px) and (max-height: #{$y}px) and (min-height: #{$ny}px) {
                $suffix: "-#{$x}x#{$y}";
                background-image: file-suffix($image, $suffix, $file-types);
            }
        }

        //last
        $last: nth($breakpoints, -1);
        $x: map-get($last, x);
        $y: map-get($last, y);
        @media screen and (max-width: #{$x}px) and (max-height: #{$y}px) {
            $suffix: "-#{$x}x#{$y}";
            background-image: file-suffix($image, $suffix, $file-types);
        }
    } @else {
        background-image: $image;
    }
}

@mixin background-image ($image: none, $x: center, $y: center, $size: cover, $repeat: no-repeat, $lighten: 0, $darken: 0, $blur: null, $responsive: false) {

    @if $blur {
        @extend .relative, .overflow-h;

        &::after {
            $blur-offset: -$blur * 2;
            content: "";
            position: absolute;
            top: $blur-offset; left: $blur-offset; right: $blur-offset; bottom: $blur-offset;
            @include blur($blur);
            @include background-image($image, $x, $y, $lighten, $darken, $responsive: $responsive);
            z-index: -1;
        }
    } @else if $image != none {
        @if $lighten > 0 {
            $image: (linear-gradient(rgba(white, $lighten), rgba(white, $lighten)), $image);
        } @else if $darken > 0 {
            $image: (linear-gradient(rgba(black, $darken), rgba(black, $darken)), $image);
        }
        @if $responsive {
            @include responsive-image($image);
        } @else {
            background-image: $image;
        }
    } @else {
        @if $lighten > 0 {
            @extend .relative;

            &::before {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(white, $lighten);
                z-index: 0;
            }
        } @else if $darken > 0 {
            @extend .relative;

            &::before {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(black, $darken);
                z-index: 0;
            }
        }
    }

    @if not($blur) {
        background-position: $x $y;
        background-size: $size;
        background-repeat: $repeat;
    }
}

// This mixin applies the effects its contents when a element
// with class "hover" (either same element or a parent) is hovered
@mixin hover($hover-class: "hover") {
    &.#{$hover-class}:hover, .#{$hover-class}:hover & {
        @content
    }
}

// Partials

@import
    "base",
    "layout",
    "modules"
;
